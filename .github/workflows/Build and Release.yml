name: Build and Release

on:
  workflow_dispatch:
    inputs:
      SPOTURL:
        description: 'Direct URL to Spotify .ipa'
        required: true
      CHANGEVERSION:
        description: 'SpotveeC Version Number'
        required: false
      USEACTIONSEEVEE:
        description: 'Get EeveeSpotify from latest EeveeSpotify build action'
        required: true
        default: false
        type: boolean
      EEVEEVERSION:
        description: 'EeveeSpotify Version'
        required: false
      EEVEEREPO:
        description: 'Override the repo for EeveeSpotify'
        required: false

jobs:
  build:
    runs-on: macos-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up variables
      id: setup
      run: |
        echo "EEVEEVERSION=${{ github.event.inputs.EEVEEVERSION }}" >> $GITHUB_ENV
        echo "CHANGEVERSION=${{ github.event.inputs.CHANGEVERSION }}" >> $GITHUB_ENV
        echo "SPOTURL=${{ github.event.inputs.SPOTURL }}" >> $GITHUB_ENV
        echo "VT_ENABLED=${{ secrets.VIRUSTOTALKEY != '' }}" >> $GITHUB_ENV
        echo "CATBOXHASH_ENABLED=${{ secrets.CATBOXHASH != '' }}" >> $GITHUB_ENV

    - name: Set Workflow URL
      run: |
        echo "WORKFLOWURL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV

    - name: Set EeveeSpotify Repo
      run: |
        if [ -z "${{ github.event.inputs.EEVEEREPO }}" ]; then
          echo "EEVEEREPO=whoeevee/EeveeSpotifyReborn" >> $GITHUB_ENV
        else
          repo=$(echo "${{ github.event.inputs.EEVEEREPO }}" | sed -E 's|https://github.com/([^/]+)/([^/]+)|\1/\2|')
          echo "EEVEEREPO=$repo" >> $GITHUB_ENV
        fi

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install Cyan
      run: pipx install --force https://github.com/SpotCompiled/pyzule-rw/archive/main.zip

    - name: Determine Eevee Tag
      run: |
        if [ -z "${{ env.EEVEEVERSION }}" ]; then
          EEVEETAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/releases/latest | jq -r .tag_name)
          echo "EEVEETAG=$EEVEETAG" >> $GITHUB_ENV
        else
          EEVEETAG="${{ env.EEVEEVERSION }}"
          echo "EEVEETAG=$EEVEETAG" >> $GITHUB_ENV
        fi

    - name: Create Build Components folder
      run: mkdir -p "Build Components"

    - name: Download Spotify IPA
      run: |
        curl -LJO "${{ env.SPOTURL }}"
        downloaded_file=$(ls -t | head -n1)
        mv "$downloaded_file" "Build Components/"
        echo "spotifypath=Build Components/$downloaded_file" >> $GITHUB_ENV

    # --- VirusTotal Upload Steps for Spotify ---
    - name: Upload Spotify IPA to VirusTotal
      if: ${{ env.VT_ENABLED == 'true' }}
      uses: crazy-max/ghaction-virustotal@v4
      with:
        files: "${{ env.spotifypath }}"
        vt_api_key: ${{ secrets.VIRUSTOTALKEY }}
      id: vt-spotify

    - name: Set VirusTotal Analysis URL for Spotify IPA
      if: ${{ env.VT_ENABLED == 'true' }}
      run: echo "VTVANILLASPOTIFY=${{ steps.vt-spotify.outputs.analysis }}" >> $GITHUB_ENV

    # --- Download & Validate Orion, EeveeSpotify, SwiftProtobuf ---
    - name: Download and process Orion
      run: |
        curl -sSL https://repo.chariz.com/Packages -o Packages
        ORIONVERSION=$(awk '...' Packages) # shortened for brevity
        FILENAME=$(awk '...' Packages)
        SHA256=$(awk '...' Packages)
        MD5=$(awk '...' Packages)
        curl -LJO "https://repo.chariz.com/$FILENAME"
        mv "$(ls -t | head -n1)" "Build Components/$FILENAME"
        orion="Build Components/$FILENAME"
        echo "orion=$orion" >> $GITHUB_ENV
        echo "ORIONVERSION=$ORIONVERSION" >> $GITHUB_ENV
        rm -f Packages

    - name: Upload Orion to VirusTotal
      if: ${{ env.VT_ENABLED == 'true' }}
      uses: crazy-max/ghaction-virustotal@v4
      with:
        files: "${{ env.orion }}"
        vt_api_key: ${{ secrets.VIRUSTOTALKEY }}
      id: vt-orion

    # --- EeveeSpotify download logic (from releases or artifacts) ---
    - name: Download EeveeSpotify .deb
      run: |
        if [ "${{ github.event.inputs.USEACTIONSEEVEE }}" == "false" ]; then
          eevee_asset=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/releases/tags/${{ env.EEVEETAG }} | jq -r '.assets[] | select(.name | endswith("iphoneos-arm64.deb")).browser_download_url')
          curl -LJO "$eevee_asset"
          mv "$(ls -t | head -n1)" "Build Components/"
          echo "eevee-arm64=Build Components/$(basename "$eevee_asset")" >> $GITHUB_ENV
        else
          # Logic for workflow artifacts
          echo "Fetching from workflow artifacts..." # simplified
        fi

    - name: Upload EeveeSpotify to VirusTotal
      if: ${{ env.VT_ENABLED == 'true' }}
      uses: crazy-max/ghaction-virustotal@v4
      with:
        files: "${{ env.eevee-arm64 }}"
        vt_api_key: ${{ secrets.VIRUSTOTALKEY }}
      id: vt-eevee

    # --- SwiftProtobuf Download & VirusTotal ---
    - name: Download SwiftProtobuf
      run: |
        protobuf_asset=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/releases/tags/${{ env.EEVEETAG }} | jq -r '.assets[] | select(.name | contains("swiftprotobuf")).browser_download_url')
        curl -LJO "$protobuf_asset"
        mv "$(ls -t | head -n1)" "Build Components/"
        echo "swiftprotobuf=Build Components/$(basename "$protobuf_asset")" >> $GITHUB_ENV

    - name: Upload SwiftProtobuf to VirusTotal
      if: ${{ env.VT_ENABLED == 'true' }}
      uses: crazy-max/ghaction-virustotal@v4
      with:
        files: "${{ env.swiftprotobuf }}"
        vt_api_key: ${{ secrets.VIRUSTOTALKEY }}
      id: vt-swiftprotobuf

    # --- Decrypt Spotify IPA & Read Info.plist ---
    - name: Read Spotify Info
      run: |
        unzip "${{ env.spotifypath }}" -d "Build Components"
        cp "Build Components/Payload/Spotify.app/Info.plist" Info.plist
        VANILLASPOTIFYVERSION=$(/usr/libexec/PlistBuddy -c "Print :SpotifyVersionShort" Info.plist)
        echo "VANILLASPOTIFYVERSION=$VANILLASPOTIFYVERSION" >> $GITHUB_ENV
        MIN_IOS_VERSION=$(/usr/libexec/PlistBuddy -c "Print :MinimumOSVersion" Info.plist)
        echo "MIN_IOS_VERSION=$MIN_IOS_VERSION" >> $GITHUB_ENV

    # --- Patch Spotify using Cyan ---
    - name: Run Cyan
      run: |
        Cyan -i "${{ env.spotifypath }}" -o "Build Components/SpotveeC.v${{ env.CHANGEVERSION }}.ipa" -v ${{ env.CHANGEVERSION }} -f "${{ env.orion }}" "${{ env.swiftprotobuf }}" "${{ env.eevee-arm64 }}" -u -w
        echo "patchedspotify=Build Components/SpotveeC.v${{ env.CHANGEVERSION }}.ipa" >> $GITHUB_ENV

    - name: Upload SpotveeC to VirusTotal
      if: ${{ env.VT_ENABLED == 'true' }}
      uses: crazy-max/ghaction-virustotal@v4
      with:
        files: "${{ env.patchedspotify }}"
        vt_api_key: ${{ secrets.VIRUSTOTALKEY }}
      id: vt-spotv

