name: Build and Release

on:
  workflow_dispatch:
    inputs:
      SPOTURL:
        description: 'Direct URL to Spotify .ipa'
        required: true
      CHANGEVERSION:
        description: 'SpotveeC Version Number'
        required: false
      USEACTIONSEEVEE:
        description: 'Get EeveeSpotify from latest EeveeSpotfiy build action'
        required: true
        default: false
        type: boolean
      EEVEEVERSION:
        description: 'EeveeSpotify Version'
        required: false
      EEVEEREPO:
        description: 'Override the repo for EeveeSpotify'
        required: false

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up variables
        id: setup
        run: |
          echo "EEVEEVERSION=${{ github.event.inputs.EEVEEVERSION }}" >> $GITHUB_ENV
          echo "CHANGEVERSION=${{ github.event.inputs.CHANGEVERSION }}" >> $GITHUB_ENV
          echo "SPOTURL=${{ github.event.inputs.SPOTURL }}" >> $GITHUB_ENV
          echo "VT_ENABLED=${{ secrets.VIRUSTOTALKEY != '' }}" >> $GITHUB_ENV
          echo "CATBOXHASH_ENABLED=${{ secrets.CATBOXHASH != '' }}" >> $GITHUB_ENV

      - name: Set Workflow URL
        run: |
          echo "WORKFLOWURL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV

      - name: Set EeveeSpotify Repo
        run: |
          if [ "${{ github.event.inputs.EEVEEREPO }}" != "" ]; then
            EEVEEREPO=$(echo "${{ github.event.inputs.EEVEEREPO }}" | sed -E 's|https://github.com/([^/]+)/([^/]+)|\1/\2|')
          else
            EEVEEREPO="whoeevee/EeveeSpotifyReborn"
          fi
          echo "EEVEEREPO=$EEVEEREPO" >> $GITHUB_ENV

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Cyan
        run: pipx install --force https://github.com/SpotCompiled/pyzule-rw/archive/main.zip

      - name: Create Build Components folder
        run: mkdir -p "Build Components"

      - name: Download Spotify IPA
        run: |
          echo "Downloading From: ${{ github.event.inputs.SPOTURL }}"
          curl -LJO "${{ github.event.inputs.SPOTURL }}"
          downloaded_file=$(ls -t | head -n1)
          mv "$downloaded_file" "Build Components/"
          echo "spotifypath=Build Components/$downloaded_file" >> $GITHUB_ENV

      - name: Download and process Orion
        run: |
          mkdir -p "Build Components"
          curl -sSL https://repo.chariz.com/Packages -o Packages

          ORIONVERSION=$(awk 'BEGIN { RS=""; FS="\n"; highest_version = "" } $1 ~ /^Package: dev.theos.orion14$/ && $0 ~ /Architecture: iphoneos-arm64([^6]|$)/ { for (i=1;i<=NF;i++){ if($i~/^Version: /){split($i,a," ");version=a[2]; if(highest_version=="" || version>highest_version){highest_version=version}}}} END{if(highest_version!="") print highest_version}' Packages)
          echo "ORIONVERSION=$ORIONVERSION" >> $GITHUB_ENV

          FILENAME=$(awk 'BEGIN{RS="";FS="\n";highest_version=""} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm64/{current_version="";current_filename="";for(i=1;i<=NF;i++){if($i~/^Version: /){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^Filename: /){split($i,a," ");current_filename=a[2]}}if(highest_version==""||current_version>highest_version){highest_version=current_version;highest_filename=current_filename}} END{if(highest_version!="")print highest_filename}' Packages)
          echo "Downloading Orion: $FILENAME"
          curl -LJO "https://repo.chariz.com/$FILENAME"
          downloaded_file=$(ls -t | head -n1)
          mv "$downloaded_file" "Build Components/"
          ORIONPATH="Build Components/$downloaded_file"
          echo "orion=$ORIONPATH" >> $GITHUB_ENV

          # Validate hash
          SHA256=$(awk 'BEGIN{RS="";FS="\n";highest_version="";sha256="noSHA"} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm64/{current_version="";sha256_found=0;for(i=1;i<=NF;i++){if($i~/^Version: /){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^SHA256: /){split($i,a," ");sha256=a[2];sha256_found=1}}if(highest_version==""||current_version>highest_version){highest_version=current_version;if(sha256_found==1){highest_sha256=sha256}else{highest_sha256="noSHA"}}}END{if(highest_version!="")print highest_sha256}' Packages)
          if [ "$SHA256" != "noSHA" ]; then
            calculated_sha256=$(shasum -a 256 "$ORIONPATH" | awk '{print $1}')
            if [ "$calculated_sha256" != "$SHA256" ]; then
              echo "SHA256 mismatch for Orion!"
              exit 1
            fi
          fi
          rm -f Packages

      - name: Patch Spotify IPA
        run: |
          # Patch the Spotify IPA using Cyan
          cyan patch "$spotifypath" --orion "$orion" --output "Build Components/Patched_Spotify.ipa"
          echo "PATCHED_SPOTIFY=Build Components/Patched_Spotify.ipa" >> $GITHUB_ENV

      - name: Upload Patched IPA as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Patched-Spotify-IPA
          path: ${{ env.PATCHED_SPOTIFY }}

      - name: Create Draft GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.CHANGEVERSION }}"
          name: "SpotveeC v${{ env.CHANGEVERSION }}"
          draft: true
          body: "Patched Spotify IPA built from workflow: ${{ env.WORKFLOWURL }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Patched IPA to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.CHANGEVERSION }}"
          name: "SpotveeC v${{ env.CHANGEVERSION }}"
          files: ${{ env.PATCHED_SPOTIFY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
