name: Build and Release

on:
  workflow_dispatch:
    inputs:
      SPOTURL:
        description: 'Direct URL to Spotify .ipa'
        required: true
      CHANGEVERSION:
        description: 'SpotveeC Version Number'
        required: false
      USEACTIONSEEVEE:
        description: 'Get EeveeSpotify from latest EeveeSpotfiy build action'
        required: true
        default: false
        type: boolean
      EEVEEVERSION:
        description: 'EeveeSpotify Version'
        required: false
      EEVEEREPO:
        description: 'Override the repo for EeveeSpotify'
        required: false

jobs:
  build:
    runs-on: macos-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up variables
      id: setup
      run: |
        echo "EEVEEVERSION=${{ github.event.inputs.EEVEEVERSION }}" >> $GITHUB_ENV
        echo "CHANGEVERSION=${{ github.event.inputs.CHANGEVERSION }}" >> $GITHUB_ENV
        echo "SPOTURL=${{ github.event.inputs.SPOTURL }}" >> $GITHUB_ENV
        echo "VT_ENABLED=${{ secrets.VIRUSTOTALKEY != '' }}" >> $GITHUB_ENV
        echo "CATBOXHASH_ENABLED=${{ secrets.CATBOXHASH != '' }}" >> $GITHUB_ENV
        
    - name: Set Workflow URL
      run: |
        echo "WORKFLOWURL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV
        echo "Workflow URL is ${{ env.WORKFLOWURL }}"

    - name: Set EeveeSpotify Repo if given
      if: ${{ github.event.inputs.EEVEEREPO != '' }}
      run: |
        EEVEEREPO=$(echo "${{ github.event.inputs.EEVEEREPO }}" | sed -E 's|https://github.com/([^/]+)/([^/]+)|\1/\2|' | sed 's|^https://github.com/||')
        echo "EEVEEREPO=$EEVEEREPO" >> $GITHUB_ENV
        
    - name: Set EeveeSpotify Repo if not given
      if: ${{ github.event.inputs.EEVEEREPO == '' }}
      run: |
        EEVEEREPO=$(echo "whoeevee/EeveeSpotifyReborn")
        echo "EEVEEREPO=$EEVEEREPO" >> $GITHUB_ENV

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        
    - name: Install Cyan
      run: pipx install --force https://github.com/SpotCompiled/pyzule-rw/archive/main.zip

    - name: Set EEVEETAG if EEVEEVERSION not provided
      if: ${{ github.event.inputs.EEVEEVERSION == '' }}
      run: |
        echo "EEVEEVERSION not provided, fetching latest release tag..."
        EEVEETAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/releases/latest | jq -r .tag_name)
        echo "EEVEETAG=$EEVEETAG" >> $GITHUB_ENV
        echo "Latest release tag: ${{ env.EEVEETAG }}"
        
    - name: Set EEVEETAG if tag provided
      if: ${{ env.EEVEEVERSION != '' }}
      id: fetch-tags
      run: |
        EEVEEVERSION="${{ env.EEVEEVERSION }}"
        # Fetch all tags from the repository
        tags=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/tags | jq -r '.[].name')
        
        # Find the tag that contains the EEVEEVERSION value
        for tag in $tags; do
          if [[ $tag == *"$EEVEEVERSION"* ]]; then
            echo "EEVEETAG=$tag" >> $GITHUB_ENV
            echo "EEVEETAG: ${{ env.EEVEETAG }}"
            exit 0
          fi
        done
        # If no matching tag is found, fail the job
        echo "No matching tag found for EEVEEVERSION=$EEVEEVERSION"
        exit 1
        echo "Using Release Tag: ${{ env.EEVEETAG }}"

    - name: Create Build Components folder
      run: mkdir -p "Build Components"

    - name: Download Spotify IPA
      run: |
        echo "Downloading From: ${{ github.event.inputs.SPOTURL }}"
        # Download the file using curl
        curl -LJO "${{ github.event.inputs.SPOTURL }}"
        downloaded_file=$(ls -t | head -n1)
        mv "$downloaded_file" "Build Components/"
        echo "spotifypath=Build Components/$downloaded_file" >> $GITHUB_ENV
      env:
        SPOTURL: ${{ github.event.inputs.SPOTURL }}
      
    - name: Upload Spotify IPA to VirusTotal
      if: ${{ env.VT_ENABLED == 'true' }}
      uses: crazy-max/ghaction-virustotal@v4
      id: vt-spotify
      with:
        files: "${{ env.spotifypath }}"
        vt_api_key: ${{ secrets.VIRUSTOTALKEY }}
        
    - name: Set VirusTotal Analysis URL for Spotify IPA
      if: ${{ env.VT_ENABLED == 'true' }}
      run: echo "VTVANILLASPOTIFY=${{ steps.vt-spotify.outputs.analysis }}" >> $GITHUB_ENV

    - name: Download and process Orion
      run: |
        # Download the Packages file from repo.chariz.com
        curl -sSL https://repo.chariz.com/Packages -o Packages
    
        # Use awk to find entries for dev.theos.orion14, Architecture: iphoneos-arm64, find the highest version
        # extract the version, filename, SHA256 Hash, and MD5 hash
        ORIONVERSION=$(awk 'BEGIN { RS = ""; FS = "\n"; highest_version = "" } $1 ~ /^Package: dev.theos.orion14$/ && $0 ~ /Architecture: iphoneos-arm64([^6]|$)/ { for (i = 1; i <= NF; i++) { if ($i ~ /^Version: /) { split($i, a, " "); version = a[2]; if (highest_version == "" || version > highest_version) { highest_version = version } } } } END { if (highest_version != "") print highest_version }' Packages)
        echo "Orion Version Extracted: $ORIONVERSION"
        FILENAME=$(awk 'BEGIN{RS="";FS="\n";highest_version=""} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm64/{current_version="";current_filename="";for(i=1;i<=NF;i++){if($i~/^Version: /){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^Filename: /){split($i,a," ");current_filename=a[2]}}if(highest_version==""||current_version>highest_version){highest_version=current_version;highest_filename=current_filename}} END{if(highest_version!="")print highest_filename}' Packages)
        echo "Orion FileName Extracted: $FILENAME"
        SHA256=$(awk 'BEGIN{RS="";FS="\n";highest_version="";sha256="noSHA"} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm64/{current_version="";sha256_found=0;for(i=1;i<=NF;i++){if($i~/^Version: /){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^SHA256: /){split($i,a," ");sha256=a[2];sha256_found=1}}if(highest_version==""||current_version>highest_version){highest_version=current_version;if(sha256_found==1){highest_sha256=sha256}else{highest_sha256="noSHA"}}}END{if(highest_version!="")print highest_sha256}' Packages)
        echo "Orion SHA256 Hash Extracted: $SHA256"
        MD5=$(awk 'BEGIN{RS="";FS="\n";highest_version="";md5sum="noMD5"} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm64/{current_version="";for(i=1;i<=NF;i++){if($i~/^Version: /){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^MD5Sum: /){split($i,a," ");md5sum=a[2]}}if(highest_version==""||current_version>highest_version){highest_version=current_version;highest_md5sum=md5sum}} END{if(highest_version!="")print highest_md5sum}' Packages)
        echo "Orion MD5 Hash Extracted: $MD5"

        echo "Downloading From: https://repo.chariz.com/$FILENAME"
        curl -sSL "https://repo.chariz.com/$FILENAME" -o "Build Components/$FILENAME"
        echo "orion=Build Components/$FILENAME" >> $GITHUB_ENV
        echo "SHA256=$SHA256" >> $GITHUB_ENV
        echo "MD5=$MD5" >> $GITHUB_ENV
        
    - name: Run Cyan
      run: |
        Cyan -i "${{ env.spotifypath }}" -o "${{ env.componentspath }}/SpotveeC.v${{ env.CHANGEVERSION }}_v${{ env.VANILLASPOTIFYVERSION }}.ipa" -v ${{ env.CHANGEVERSION }} -f "${{ env.orion }}" "${{ env.swiftprotobuf }}" "${{ env.eevee-arm64 }}" -u -w
        echo "patchedspotify=${{ env.componentspath }}/SpotveeC.v${{ env.CHANGEVERSION }}_v${{ env.VANILLASPOTIFYVERSION }}.ipa"
        echo "patchedspotify=${{ env.componentspath }}/SpotveeC.v${{ env.CHANGEVERSION }}_v${{ env.VANILLASPOTIFYVERSION }}.ipa" >> $GITHUB_ENV
        echo "Patched Spotify .ipa Located: ${{ env.patchedspotify }}"
