name: Build and Release

on:
  workflow_dispatch:
    inputs:
      SPOTURL:
        description: 'Direct URL to Spotify .ipa'
        required: true
      CHANGEVERSION:
        description: 'SpotveeC Version Number'
        required: false
      USEACTIONSEEVEE:
        description: 'Get EeveeSpotify from latest EeveeSpotify build action'
        required: true
        default: false
        type: boolean
      EEVEEVERSION:
        description: 'EeveeSpotify Version'
        required: false
      EEVEEREPO:
        description: 'Override the repo for EeveeSpotify'
        required: false

jobs:
  build:
    runs-on: macos-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up environment variables
      id: setup
      run: |
        echo "EEVEEVERSION=${{ github.event.inputs.EEVEEVERSION }}" >> $GITHUB_ENV
        echo "CHANGEVERSION=${{ github.event.inputs.CHANGEVERSION }}" >> $GITHUB_ENV
        echo "SPOTURL=${{ github.event.inputs.SPOTURL }}" >> $GITHUB_ENV
        echo "VT_ENABLED=${{ secrets.VIRUSTOTALKEY != '' }}" >> $GITHUB_ENV
        echo "CATBOXHASH_ENABLED=${{ secrets.CATBOXHASH != '' }}" >> $GITHUB_ENV
        echo "WORKFLOWURL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV
        echo "componentspath=Build Components" >> $GITHUB_ENV

    - name: Set EeveeSpotify Repo
      run: |
        if [ -n "${{ github.event.inputs.EEVEEREPO }}" ]; then
          EEVEEREPO=$(echo "${{ github.event.inputs.EEVEEREPO }}" | sed -E 's|https://github.com/([^/]+)/([^/]+)|\1/\2|')
        else
          EEVEEREPO="whoeevee/EeveeSpotifyReborn"
        fi
        echo "EEVEEREPO=$EEVEEREPO" >> $GITHUB_ENV

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install Cyan
      run: pipx install --force https://github.com/SpotCompiled/pyzule-rw/archive/main.zip

    - name: Determine EeveeSpotify tag
      id: eevee_tag
      run: |
        if [ -z "${{ env.EEVEEVERSION }}" ]; then
          echo "Fetching latest EeveeSpotify release tag..."
          EEVEETAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/releases/latest | jq -r .tag_name)
        else
          EEVEEVERSION="${{ env.EEVEEVERSION }}"
          tags=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/tags | jq -r '.[].name')
          for tag in $tags; do
            if [[ $tag == *"$EEVEEVERSION"* ]]; then
              EEVEETAG=$tag
              break
            fi
          done
          if [ -z "$EEVEETAG" ]; then
            echo "No matching tag found for EEVEEVERSION=$EEVEEVERSION"
            exit 1
          fi
        fi
        echo "EEVEETAG=$EEVEETAG" >> $GITHUB_ENV
        echo "Using EeveeSpotify tag: $EEVEETAG"

    - name: Create Build Components folder
      run: mkdir -p "${{ env.componentspath }}"

    - name: Download Spotify IPA
      run: |
        echo "Downloading Spotify IPA from ${{ env.SPOTURL }}"
        curl -LJO "${{ env.SPOTURL }}"
        downloaded_file=$(ls -t | head -n1)
        mv "$downloaded_file" "${{ env.componentspath }}/"
        echo "spotifypath=${{ env.componentspath }}/$downloaded_file" >> $GITHUB_ENV

    - name: Upload Spotify IPA to VirusTotal
      if: ${{ env.VT_ENABLED == 'true' }}
      uses: crazy-max/ghaction-virustotal@v4
      id: vt-spotify
      with:
        files: "${{ env.spotifypath }}"
        vt_api_key: ${{ secrets.VIRUSTOTALKEY }}

    - name: Download Orion and verify
      run: |
        curl -sSL https://repo.chariz.com/Packages -o Packages
        ORIONVERSION=$(awk 'BEGIN { RS = ""; FS = "\n"; highest_version = "" } $1 ~ /^Package: dev.theos.orion14$/ && $0 ~ /Architecture: iphoneos-arm64/ { for (i=1;i<=NF;i++){if($i~/^Version:/){split($i,a," "); version=a[2]; if(highest_version==""||version>highest_version){highest_version=version}}} } END{print highest_version}' Packages)
        FILENAME=$(awk 'BEGIN{RS="";FS="\n";highest_version=""} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm64/{current_version="";current_filename="";for(i=1;i<=NF;i++){if($i~/^Version:/){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^Filename:/){split($i,a," ");current_filename=a[2]}}if(highest_version==""||current_version>highest_version){highest_version=current_version;highest_filename=current_filename}} END{print highest_filename}' Packages)
        SHA256=$(awk 'BEGIN{RS="";FS="\n";highest_version="";sha256="noSHA"} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm64/{current_version="";sha256_found=0;for(i=1;i<=NF;i++){if($i~/^Version:/){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^SHA256:/){split($i,a," ");sha256=a[2];sha256_found=1}}if(highest_version==""||current_version>highest_version){highest_version=current_version;if(sha256_found==1){highest_sha256=sha256}else{highest_sha256="noSHA"}}}END{print highest_sha256}' Packages)
        curl -LJO "https://repo.chariz.com/$FILENAME"
        downloaded_file=$(ls -t | head -n1)
        mv "$downloaded_file" "${{ env.componentspath }}/"
        ORIONPATH="${{ env.componentspath }}/$downloaded_file"
        echo "orion=$ORIONPATH" >> $GITHUB_ENV
        echo "ORIONVERSION=$ORIONVERSION" >> $GITHUB_ENV
        rm -f Packages
        if [ "$SHA256" != "noSHA" ]; then
          calc_sha=$(shasum -a 256 "$ORIONPATH" | awk '{print $1}')
          if [ "$calc_sha" != "$SHA256" ]; then
            echo "Orion SHA256 mismatch!"
            exit 1
          fi
        fi

    - name: Upload Orion to VirusTotal
      if: ${{ env.VT_ENABLED == 'true' }}
      uses: crazy-max/ghaction-virustotal@v4
      id: vt-orion
      with:
        files: "${{ env.orion }}"
        vt_api_key: ${{ secrets.VIRUSTOTALKEY }}

    - name: Download EeveeSpotify .deb from artifacts
      if: ${{ github.event.inputs.USEACTIONSEEVEE == 'true' }}
      run: |
        workflow_run_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ env.EEVEEREPO }}/actions/workflows/build-swift.yml/runs?status=success&per_page=1" | jq -r '.workflow_runs[0].id')
        echo "Workflow ID: $workflow_run_id"
        eevee_asset=$(curl -sL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/actions/runs/$workflow_run_id/artifacts | jq -r '.artifacts[] | select(.name | test("debug|arm.deb") | not) | .archive_download_url')
        echo "Downloading From: $eevee_asset"
        curl -LJ -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$eevee_asset" -o "eeveespotfiyactionsasset.zip"
        unzip -q "eeveespotfiyactionsasset.zip" -d extracted_files
        downloaded_file=$(find extracted_files -type f -name "*.deb" -print -quit)
        mv "$downloaded_file" "${{ env.componentspath }}/"
        rm -rf extracted_files
        echo "eevee-arm64=${{ env.componentspath }}/$(basename "$downloaded_file")" >> $GITHUB_ENV
        echo "eeveeAssetLink=$eevee_asset" >> $GITHUB_ENV

    - name: Download EeveeSpotify .deb from releases
      if: ${{ github.event.inputs.USEACTIONSEEVEE == 'false' }}
      run: |
        eevee_asset=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/releases/tags/${{ env.EEVEETAG }} | jq -r '.assets[] | select(.name | startswith("com.eevee.spotify") and endswith("iphoneos-arm64.deb")).browser_download_url')
        curl -LJO "$eevee_asset"
        downloaded_file=$(ls -t | head -n1)
        mv "$downloaded_file" "${{ env.componentspath }}/"
        echo "eevee-arm64=${{ env.componentspath }}/$downloaded_file" >> $GITHUB_ENV

    - name: Run Cyan
      run: |
        mkdir -p "${{ env.componentspath }}"
        Cyan -i "${{ env.spotifypath }}" \
             -o "${{ env.componentspath }}/SpotveeC.v${{ env.CHANGEVERSION }}_v${{ env.VANILLASPOTIFYVERSION }}.ipa" \
             -v ${{ env.CHANGEVERSION }} \
             -f "${{ env.orion }}" "${{ env.swiftprotobuf }}" "${{ env.eevee-arm64 }}" \
             -u -w
        echo "patchedspotify=${{ env.componentspath }}/SpotveeC.v${{ env.CHANGEVERSION }}_v${{ env.VANILLASPOTIFYVERSION }}.ipa"
        echo "patchedspotify=${{ env.componentspath }}/SpotveeC.v${{ env.CHANGEVERSION }}_v${{ env.VANILLASPOTIFYVERSION }}.ipa" >> $GITHUB_ENV
        echo "Patched Spotify .ipa Located: ${{ env.patchedspotify }}"

    - name: Upload patched IPA to VirusTotal
      if: ${{ env.VT_ENABLED == 'true' }}
      uses: crazy-max/ghaction-virustotal@v4
      with:
        files: "${{ env.patchedspotify }}"
        vt_api_key: ${{ secrets.VIRUSTOTALKEY }}

    - name: Create Draft Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "v${{ env.CHANGEVERSION }}"
        name: "SpotveeC v${{ env.CHANGEVERSION }}"
        draft: true
        body_path: changelog.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
