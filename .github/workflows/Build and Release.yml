name: Build and Release

on:
  workflow_dispatch:
    inputs:
      SPOTURL:
        description: 'Direct URL to Spotify .ipa'
        required: true
      CHANGEVERSION:
        description: 'SpotveeC Version Number'
        required: false
      USEACTIONSEEVEE:
        description: 'Get EeveeSpotify from latest EeveeSpotify build action'
        required: true
        default: false
        type: boolean
      EEVEEVERSION:
        description: 'EeveeSpotify Version'
        required: false
      EEVEEREPO:
        description: 'Override the repo for EeveeSpotify'
        required: false

jobs:
  build:
    runs-on: macos-latest
    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up environment variables
      id: setup
      run: |
        echo "EEVEEVERSION=${{ github.event.inputs.EEVEEVERSION }}" >> $GITHUB_ENV
        echo "CHANGEVERSION=${{ github.event.inputs.CHANGEVERSION }}" >> $GITHUB_ENV
        echo "SPOTURL=${{ github.event.inputs.SPOTURL }}" >> $GITHUB_ENV
        echo "VT_ENABLED=${{ secrets.VIRUSTOTALKEY != '' }}" >> $GITHUB_ENV
        echo "CATBOXHASH_ENABLED=${{ secrets.CATBOXHASH != '' }}" >> $GITHUB_ENV
        echo "WORKFLOWURL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV

    - name: Set EeveeSpotify repository
      run: |
        if [ "${{ github.event.inputs.EEVEEREPO }}" != "" ]; then
          EEVEEREPO=$(echo "${{ github.event.inputs.EEVEEREPO }}" | sed -E 's|https://github.com/([^/]+)/([^/]+)|\1/\2|' | sed 's|^https://github.com/||')
        else
          EEVEEREPO="whoeevee/EeveeSpotifyReborn"
        fi
        echo "EEVEEREPO=$EEVEEREPO" >> $GITHUB_ENV

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install Cyan
      run: pipx install --force https://github.com/SpotCompiled/pyzule-rw/archive/main.zip

    - name: Set Eevee tag
      id: set-eevee-tag
      run: |
        if [ -z "${{ env.EEVEEVERSION }}" ]; then
          EEVEETAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/releases/latest | jq -r .tag_name)
        else
          EEVEEVERSION="${{ env.EEVEEVERSION }}"
          tags=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/tags | jq -r '.[].name')
          for tag in $tags; do
            if [[ $tag == *"$EEVEEVERSION"* ]]; then
              EEVEETAG=$tag
              break
            fi
          done
          if [ -z "$EEVEETAG" ]; then
            echo "No matching tag found for EEVEEVERSION=$EEVEEVERSION"
            exit 1
          fi
        fi
        echo "EEVEETAG=$EEVEETAG" >> $GITHUB_ENV
        echo "Using Eevee tag: $EEVEETAG"

    - name: Create Build Components folder
      run: mkdir -p "Build Components"

    - name: Download Spotify IPA
      run: |
        echo "Downloading Spotify from: ${{ github.event.inputs.SPOTURL }}"
        curl -LJO "${{ github.event.inputs.SPOTURL }}"
        downloaded_file=$(ls -t | head -n1)
        mv "$downloaded_file" "Build Components/"
        echo "spotifypath=Build Components/$downloaded_file" >> $GITHUB_ENV

    - name: Upload Spotify IPA to VirusTotal
      if: ${{ env.VT_ENABLED == 'true' }}
      uses: crazy-max/ghaction-virustotal@v4
      id: vt-spotify
      with:
        files: "${{ env.spotifypath }}"
        vt_api_key: ${{ secrets.VIRUSTOTALKEY }}

    - name: Set VirusTotal Spotify URL
      if: ${{ env.VT_ENABLED == 'true' }}
      run: echo "VTVANILLASPOTIFY=${{ steps.vt-spotify.outputs.analysis }}" >> $GITHUB_ENV

    - name: Download and process Orion
      run: |
        # Download the Packages file from repo.chariz.com
        curl -sSL https://repo.chariz.com/Packages -o Packages
    
        # Use awk to find entries for dev.theos.orion14, Architecture: iphoneos-arm64, find the highest version
        # extract the version, filename, SHA256 Hash, and MD5 hash
        ORIONVERSION=$(awk 'BEGIN { RS = ""; FS = "\n"; highest_version = "" } $1 ~ /^Package: dev.theos.orion14$/ && $0 ~ /Architecture: iphoneos-arm64([^6]|$)/ { for (i = 1; i <= NF; i++) { if ($i ~ /^Version: /) { split($i, a, " "); version = a[2]; if (highest_version == "" || version > highest_version) { highest_version = version } } } } END { if (highest_version != "") print highest_version }' Packages)
        echo "Orion Version Extracted: $ORIONVERSION"
        FILENAME=$(awk 'BEGIN{RS="";FS="\n";highest_version=""} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm64/{current_version="";current_filename="";for(i=1;i<=NF;i++){if($i~/^Version: /){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^Filename: /){split($i,a," ");current_filename=a[2]}}if(highest_version==""||current_version>highest_version){highest_version=current_version;highest_filename=current_filename}} END{if(highest_version!="")print highest_filename}' Packages)
        echo "Orion FileName Extracted: $FILENAME"
        SHA256=$(awk 'BEGIN{RS="";FS="\n";highest_version="";sha256="noSHA"} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm64/{current_version="";sha256_found=0;for(i=1;i<=NF;i++){if($i~/^Version: /){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^SHA256: /){split($i,a," ");sha256=a[2];sha256_found=1}}if(highest_version==""||current_version>highest_version){highest_version=current_version;if(sha256_found==1){highest_sha256=sha256}else{highest_sha256="noSHA"}}}END{if(highest_version!="")print highest_sha256}' Packages)
        echo "Orion SHA256 Hash Extracted: $SHA256"
        MD5=$(awk 'BEGIN{RS="";FS="\n";highest_version="";md5sum="noMD5"} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm64/{current_version="";for(i=1;i<=NF;i++){if($i~/^Version: /){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^MD5Sum: /){split($i,a," ");md5sum=a[2]}}if(highest_version==""||current_version>highest_version){highest_version=current_version;highest_md5sum=md5sum}} END{if(highest_version!="")print highest_md5sum}' Packages)
        echo "Orion MD5 Hash Extracted: $MD5"

        echo "Downloading From: https://repo.chariz.com/$FILENAME"
        # Download the file using curl
        curl -LJO "https://repo.chariz.com/$FILENAME"
        downloaded_file=$(ls -t | head -n1)
        mv "$downloaded_file" "Build Components/"
        orion="Build Components/$downloaded_file"
        echo "orion path: $orion"
        
        #Check Hash
        if [[ "${SHA256}" != "noSHA" ]]; then
          echo "Expected SHA256 Hash: ${SHA256}"
          calculated_sha256=$(shasum -a 256 "$orion" | awk '{print $1}')
          echo "Calculated SHA256 Hash: $calculated_sha256"
          if [[ "${calculated_sha256}" == "${SHA256}" ]]; then
            echo "SHA256 matches. Continuing..."
          else
            echo "SHA256 does not match."
            exit 1
          fi
        elif [[ "${MD5}" != "noMD5" ]]; then
          echo "Expected MD5 Hash: ${MD5}"
          calculated_md5=$(md5 -q "$orion" | awk '{print $1}')
          echo "Calculated MD5 Hash: $calculated_md5"
          if [[ "${calculated_md5}" == "${MD5}" ]]; then
            echo "MD5 matches. Continuing..."
          else
            echo "MD5 does not match."
            exit 1
          fi
        else
          echo "Neither SHA256 nor MD5 is valid"
          exit 1
        fi

        #CleanUp
        rm -f Packages

        #Set Env Varibles
        echo "orion=Build Components/$downloaded_file" >> $GITHUB_ENV
        echo "ORIONVERSION=$ORIONVERSION" >> $GITHUB_ENV

    - name: Upload Orion to VirusTotal
      if: ${{ env.VT_ENABLED == 'true' }}
      uses: crazy-max/ghaction-virustotal@v4
      id: vt-orion
      with:
        files: "${{ env.orion }}"
        vt_api_key: ${{ secrets.VIRUSTOTALKEY }}

    - name: Set VirusTotal Orion URL
      if: ${{ env.VT_ENABLED == 'true' }}
      run: echo "VTORION=${{ steps.vt-orion.outputs.analysis }}" >> $GITHUB_ENV

    - name: Download EeveeSpotify .deb
      if: ${{ github.event.inputs.USEACTIONSEEVEE == 'false' }}
      run: |
        eevee_asset=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/releases/tags/${{ env.EEVEETAG }} | jq -r '.assets[] | select(.name | startswith("com.eevee.spotify") and endswith("
