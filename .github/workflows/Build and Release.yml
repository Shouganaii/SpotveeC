name: SpotveeC Build & Orion Download

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-spotvee:
    runs-on: macos-latest
    env:
      SPOTURL: https://files.catbox.moe/br15wj.ipa
      VT_ENABLED: false
      CATBOXHASH_ENABLED: false
      WORKFLOWURL: https://github.com/Shouganaii/SpotveeC-personal/actions/runs/18151304474
      EEVEEREPO: whoeevee/EeveeSpotifyReborn
      EEVEETAG: swift6.1.5

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Create Build Components directory
        run: mkdir -p "Build Components"

      - name: Download and process Orion
        run: |
          set -e

          # Download Packages file
          curl -sSL https://repo.chariz.com/Packages -o Packages

          # Extract Orion info
          ORIONVERSION=$(awk '
            BEGIN { RS=""; FS="\n"; highest_version="" }
            $1 ~ /^Package: dev.theos.orion14$/ && $0 ~ /Architecture: iphoneos-arm64/ {
              for(i=1;i<=NF;i++){
                if($i~/^Version:/){split($i,a," "); version=a[2]; if(highest_version=="" || version>highest_version){highest_version=version}}
              }
            }
            END { print highest_version }
          ' Packages)
          echo "Orion Version Extracted: $ORIONVERSION"

          FILENAME=$(awk -v ver="$ORIONVERSION" '
            BEGIN { RS=""; FS="\n" }
            $1 ~ /^Package: dev.theos.orion14$/ && $0 ~ /Architecture: iphoneos-arm64/ {
              current_version=""; current_filename=""
              for(i=1;i<=NF;i++){
                if($i~/^Version:/){split($i,a," "); current_version=a[2]}
                else if($i~/^Filename:/){split($i,a," "); current_filename=a[2]}
              }
              if(current_version==ver){print current_filename; exit}
            }
          ' Packages)
          echo "Orion Filename Extracted: $FILENAME"

          SHA256=$(awk -v ver="$ORIONVERSION" '
            BEGIN { RS=""; FS="\n"; sha256="noSHA" }
            $1 ~ /^Package: dev.theos.orion14$/ && $0 ~ /Architecture: iphoneos-arm64/ {
              current_version=""; current_sha256="noSHA"
              for(i=1;i<=NF;i++){
                if($i~/^Version:/){split($i,a," "); current_version=a[2]}
                else if($i~/^SHA256:/){split($i,a," "); current_sha256=a[2]}
              }
              if(current_version==ver){sha256=current_sha256; exit}
            }
            END { print sha256 }
          ' Packages)
          echo "Orion SHA256 Hash Extracted: $SHA256"

          MD5=$(awk -v ver="$ORIONVERSION" '
            BEGIN { RS=""; FS="\n"; md5sum="noMD5" }
            $1 ~ /^Package: dev.theos.orion14$/ && $0 ~ /Architecture: iphoneos-arm64/ {
              current_version=""; current_md5="noMD5"
              for(i=1;i<=NF;i++){
                if($i~/^Version:/){split($i,a," "); current_version=a[2]}
                else if($i~/^MD5Sum:/){split($i,a," "); current_md5=a[2]}
              }
              if(current_version==ver){md5sum=current_md5; exit}
            }
            END { print md5sum }
          ' Packages)
          echo "Orion MD5 Hash Extracted: $MD5"

          # Download the package
          echo "Downloading From: https://repo.chariz.com/$FILENAME"
          curl -LJO "https://repo.chariz.com/$FILENAME"
          downloaded_file=$(ls -t | grep "$FILENAME" | head -n1)
          mv "$downloaded_file" "Build Components/"
          orion="Build Components/$downloaded_file"
          echo "Orion path: $orion"

          # Verify Hash
          if [[ "$SHA256" != "noSHA" ]]; then
            echo "Expected SHA256 Hash: $SHA256"
            calculated_sha256=$(shasum -a 256 "$orion" | awk '{print $1}')
            if [[ "$calculated_sha256" != "$SHA256" ]]; then
              echo "SHA256 mismatch!"
              exit 1
            fi
          elif [[ "$MD5" != "noMD5" ]]; then
            echo "Expected MD5 Hash: $MD5"
            calculated_md5=$(md5 -q "$orion")
            if [[ "$calculated_md5" != "$MD5" ]]; then
              echo "MD5 mismatch!"
              exit 1
            fi
          else
            echo "No valid hash found. Exiting..."
            exit 1
          fi

          rm -f Packages
          echo "orion=$orion" >> $GITHUB_ENV
          echo "ORIONVERSION=$ORIONVERSION" >> $GITHUB_ENV

      - name: Download SpotveeC IPA
        run: |
          curl -L -o Build\ Components/spotveeC.ipa $SPOTURL
          echo "spotveeC=Build Components/spotveeC.ipa" >> $GITHUB_ENV

      - name: Build / Patch SpotveeC (example placeholder)
        run: |
          echo "Building SpotveeC with Orion $ORIONVERSION..."
          # Insert your build or patching commands here
          # e.g., python build script or patch script

      - name: Create Draft Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ github.run_number }}"
          name: "SpotveeC v${{ github.run_number }}"
          draft: true
          body: "Automated build with Orion $ORIONVERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
