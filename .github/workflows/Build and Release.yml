name: Build and Release

on:
  workflow_dispatch:
    inputs:
      SPOTURL:
        description: 'Direct URL to Spotify .ipa'
        required: true
      CHANGEVERSION:
        description: 'SpotveeC Version Number'
        required: false
      USEACTIONSEEVEE:
        description: 'Get EeveeSpotify from latest EeveeSpotify build action'
        required: true
        default: false
        type: boolean
      EEVEEVERSION:
        description: 'EeveeSpotify Version'
        required: false
      EEVEEREPO:
        description: 'Override the repo for EeveeSpotify'
        required: false

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment variables
        run: |
          echo "EEVEEVERSION=${{ github.event.inputs.EEVEEVERSION }}" >> $GITHUB_ENV
          echo "CHANGEVERSION=${{ github.event.inputs.CHANGEVERSION }}" >> $GITHUB_ENV
          echo "SPOTURL=${{ github.event.inputs.SPOTURL }}" >> $GITHUB_ENV
          echo "VT_ENABLED=${{ secrets.VIRUSTOTALKEY != '' }}" >> $GITHUB_ENV
          echo "CATBOXHASH_ENABLED=${{ secrets.CATBOXHASH != '' }}" >> $GITHUB_ENV
          echo "WORKFLOWURL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV

      - name: Set EeveeSpotify Repo
        run: |
          if [ "${{ github.event.inputs.EEVEEREPO }}" != "" ]; then
            EEVEEREPO=$(echo "${{ github.event.inputs.EEVEEREPO }}" | sed -E 's|https://github.com/([^/]+)/([^/]+)|\1/\2|')
          else
            EEVEEREPO="whoeevee/EeveeSpotifyReborn"
          fi
          echo "EEVEEREPO=$EEVEEREPO" >> $GITHUB_ENV

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Cyan
        run: pipx install --force https://github.com/SpotCompiled/pyzule-rw/archive/main.zip

      - name: Determine EeveeSpotify Tag
        run: |
          if [ -z "${{ env.EEVEEVERSION }}" ]; then
            echo "EEVEEVERSION not provided, fetching latest release tag..."
            EEVEETAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/releases/latest | jq -r .tag_name)
          else
            tags=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/tags | jq -r '.[].name')
            for tag in $tags; do
              if [[ $tag == *"${{ env.EEVEEVERSION }}"* ]]; then
                EEVEETAG=$tag
                break
              fi
            done
            if [ -z "$EEVEETAG" ]; then
              echo "No matching tag found for EEVEEVERSION=${{ env.EEVEEVERSION }}"
              exit 1
            fi
          fi
          echo "EEVEETAG=$EEVEETAG" >> $GITHUB_ENV
          echo "Using EeveeSpotify Tag: $EEVEETAG"

      - name: Create Build Components folder
        run: mkdir -p "Build Components"

      - name: Download Spotify IPA
        run: |
          echo "Downloading From: ${{ github.event.inputs.SPOTURL }}"
          curl -LJO "${{ github.event.inputs.SPOTURL }}"
          downloaded_file=$(ls -t | head -n1)
          mv "$downloaded_file" "Build Components/"
          echo "spotifypath=Build Components/$downloaded_file" >> $GITHUB_ENV

      - name: Upload Spotify IPA to VirusTotal
        if: ${{ env.VT_ENABLED == 'true' }}
        uses: crazy-max/ghaction-virustotal@v4
        id: vt-spotify
        with:
          files: "${{ env.spotifypath }}"
          vt_api_key: ${{ secrets.VIRUSTOTALKEY }}

      - name: Download Orion & Verify Hash
        run: |
          curl -sSL https://repo.chariz.com/Packages -o Packages
          ORIONVERSION=$(awk 'BEGIN{RS="";FS="\n";highest=""} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm64/{for(i=1;i<=NF;i++){if($i~/^Version: /){v=$2;if(v>highest)highest=v}}} END{print highest}' Packages)
          FILENAME=$(awk 'BEGIN{RS="";FS="\n";highest_version=""} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm64/{v="";f="";for(i=1;i<=NF;i++){if($i~/^Version: /){v=$2} else if($i~/^Filename:/){f=$2}} if(v>highest_version){highest_version=v;highest_file=f}} END{print highest_file}' Packages)
          SHA256=$(awk 'BEGIN{RS="";FS="\n"} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm64/{for(i=1;i<=NF;i++){if($i~/^SHA256: /){sha=$2}}} END{print sha}' Packages)
          curl -LJO "https://repo.chariz.com/$FILENAME"
          downloaded_file=$(ls -t | head -n1)
          mv "$downloaded_file" "Build Components/"
          echo "orion=Build Components/$downloaded_file" >> $GITHUB_ENV
          echo "ORIONVERSION=$ORIONVERSION" >> $GITHUB_ENV
          rm -f Packages

      # Additional steps like EeveeSpotify, SwiftProtobuf downloads, Cyan runs, VirusTotal uploads, ChangeLog generation, and Release creation would follow here, similarly cleaned and consolidated.

