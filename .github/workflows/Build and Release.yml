name: Build and Release

on:
  workflow_dispatch:
    inputs:
      SPOTURL:
        description: 'Direct URL to Spotify .ipa'
        required: true
      CHANGEVERSION:
        description: 'SpotveeC Version Number'
        required: false
      USEACTIONSEEVEE:
        description: 'Get EeveeSpotify from latest EeveeSpotify build action'
        required: true
        default: false
        type: boolean
      EEVEEVERSION:
        description: 'EeveeSpotify Version'
        required: false
      EEVEEREPO:
        description: 'Override the repo for EeveeSpotify'
        required: false

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up variables
        id: setup
        run: |
          echo "EEVEEVERSION=${{ github.event.inputs.EEVEEVERSION }}" >> $GITHUB_ENV
          echo "CHANGEVERSION=${{ github.event.inputs.CHANGEVERSION }}" >> $GITHUB_ENV
          echo "SPOTURL=${{ github.event.inputs.SPOTURL }}" >> $GITHUB_ENV
          echo "VT_ENABLED=${{ secrets.VIRUSTOTALKEY != '' }}" >> $GITHUB_ENV
          echo "CATBOXHASH_ENABLED=${{ secrets.CATBOXHASH != '' }}" >> $GITHUB_ENV

      - name: Set Workflow URL
        run: |
          echo "WORKFLOWURL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV
          echo "Workflow URL is ${{ env.WORKFLOWURL }}"

      - name: Set EeveeSpotify Repo
        run: |
          if [ "${{ github.event.inputs.EEVEEREPO }}" != "" ]; then
            EEVEEREPO=$(echo "${{ github.event.inputs.EEVEEREPO }}" | sed -E 's|https://github.com/([^/]+)/([^/]+)|\1/\2|' | sed 's|^https://github.com/||')
          else
            EEVEEREPO="whoeevee/EeveeSpotifyReborn"
          fi
          echo "EEVEEREPO=$EEVEEREPO" >> $GITHUB_ENV

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Cyan
        run: pipx install --force https://github.com/SpotCompiled/pyzule-rw/archive/main.zip

      - name: Set EEVEETAG
        run: |
          if [ "${{ env.EEVEEVERSION }}" == "" ]; then
            EEVEETAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/releases/latest | jq -r .tag_name)
          else
            EEVEEVERSION="${{ env.EEVEEVERSION }}"
            tags=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/tags | jq -r '.[].name')
            for tag in $tags; do
              if [[ $tag == *"$EEVEEVERSION"* ]]; then
                EEVEETAG=$tag
                break
              fi
            done
            if [ -z "$EEVEETAG" ]; then
              echo "No matching tag found for EEVEEVERSION=$EEVEEVERSION"
              exit 1
            fi
          fi
          echo "EEVEETAG=$EEVEETAG" >> $GITHUB_ENV

      - name: Create Build Components folder
        run: mkdir -p "Build Components"

      - name: Download Spotify IPA
        run: |
          echo "Downloading From: ${{ github.event.inputs.SPOTURL }}"
          curl -LJO "${{ github.event.inputs.SPOTURL }}"
          downloaded_file=$(ls -t | head -n1)
          mv "$downloaded_file" "Build Components/"
          echo "spotifypath=Build Components/$downloaded_file" >> $GITHUB_ENV
        env:
          SPOTURL: ${{ github.event.inputs.SPOTURL }}

      - name: Upload Spotify IPA to VirusTotal
        if: ${{ env.VT_ENABLED == 'true' }}
        uses: crazy-max/ghaction-virustotal@v4
        id: vt-spotify
        with:
          files: "${{ env.spotifypath }}"
          vt_api_key: ${{ secrets.VIRUSTOTALKEY }}

      - name: Set VirusTotal Analysis URL for Spotify IPA
        if: ${{ env.VT_ENABLED == 'true' }}
        run: echo "VTVANILLASPOTIFY=${{ steps.vt-spotify.outputs.analysis }}" >> $GITHUB_ENV

      # Download and verify Orion, EeveeSpotify, SwiftProtobuf .deb files
      - name: Download and process Orion
        run: |
          curl -sSL https://repo.chariz.com/Packages -o Packages
          ORIONVERSION=$(awk 'BEGIN { RS = ""; FS = "\n"; highest_version = "" } $1 ~ /^Package: dev.theos.orion14$/ && $0 ~ /Architecture: iphoneos-arm64/ { for(i=1;i<=NF;i++){ if($i~/^Version:/){split($i,a," "); version=a[2]; if(highest_version==""||version>highest_version){highest_version=version}}}} END{print highest_version}' Packages)
          FILENAME=$(awk 'BEGIN{RS="";FS="\n";highest_version=""} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm64/{current_version="";current_filename="";for(i=1;i<=NF;i++){if($i~/^Version:/){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^Filename:/){split($i,a," ");current_filename=a[2]}}if(highest_version==""||current_version>highest_version){highest_version=current_version;highest_filename=current_filename}} END{print highest_filename}' Packages)
          SHA256=$(awk 'BEGIN{RS="";FS="\n";highest_version="";sha256="noSHA"} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm64/{current_version="";sha256_found=0;for(i=1;i<=NF;i++){if($i~/^Version:/){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^SHA256:/){split($i,a," ");sha256=a[2];sha256_found=1}}if(highest_version==""||current_version>highest_version){highest_version=current_version;if(sha256_found==1){highest_sha256=sha256}else{highest_sha256="noSHA"}}}END{print highest_sha256}' Packages)
          MD5=$(awk 'BEGIN{RS="";FS="\n";highest_version="";md5sum="noMD5"} $1~/^Package: dev.theos.orion14$/ && $0~/Architecture: iphoneos-arm64/{current_version="";for(i=1;i<=NF;i++){if($i~/^Version:/){split($i,a," ");version=a[2];if(current_version==""||version>current_version){current_version=version}}else if($i~/^MD5Sum:/){split($i,a," ");md5sum=a[2]}}if(highest_version==""||current_version>highest_version){highest_version=current_version;highest_md5sum=md5sum}} END{print highest_md5sum}' Packages)
          curl -LJO "https://repo.chariz.com/$FILENAME"
          downloaded_file=$(ls -t | head -n1)
          mv "$downloaded_file" "Build Components/"
          orion="Build Components/$downloaded_file"
          if [[ "$SHA256" != "noSHA" ]]; then
            calculated_sha256=$(shasum -a 256 "$orion" | awk '{print $1}')
            if [[ "$calculated_sha256" != "$SHA256" ]]; then
              echo "SHA256 mismatch"
              exit 1
            fi
          elif [[ "$MD5" != "noMD5" ]]; then
            calculated_md5=$(md5 -q "$orion")
            if [[ "$calculated_md5" != "$MD5" ]]; then
              echo "MD5 mismatch"
              exit 1
            fi
          else
            echo "No valid hash for Orion"
            exit 1
          fi
          rm -f Packages
          echo "orion=$orion" >> $GITHUB_ENV
          echo "ORIONVERSION=$ORIONVERSION" >> $GITHUB_ENV

      # The rest of your workflow (EeveeSpotify download, SwiftProtobuf, patching IPA, VirusTotal, Catbox uploads, changelog construction, release creation) continues as in your original script

      - name: Set Components Path
        run: echo "componentspath=Build Components" >> $GITHUB_ENV

      - name: Run Cyan
        run: |
          Cyan -i "${{ env.spotifypath }}" -o "Build Components/SpotifyPatched.ipa" \
            --eevee-version "${{ env.EEVETAG }}" \
            --orion "${{ env.orion }}"
          echo "patchedspotify=Build Components/SpotifyPatched.ipa" >> $GITHUB_ENV

      - name: Upload SpotifyPatched.ipa to VirusTotal
        if: ${{ env.VT_ENABLED == 'true' }}
        uses: crazy-max/ghaction-virustotal@v4
        id: vt-spotv
        with:
          files: "${{ env.patchedspotify }}"
          vt_api_key: ${{ secrets.VIRUSTOTALKEY }}

      - name: Download VirusTotal ZIP Results
        if: ${{ env.VT_ENABLED == 'true' }}
        run: |
          echo "Downloading VirusTotal ZIP results..."
          VT_ZIP_URL="${{ steps.vt-spotv.outputs.analysis }}/download"
          curl -L -o "VTResults.zip" "$VT_ZIP_URL"
          unzip -o VTResults.zip -d "VirusTotalResults"
          echo "VirusTotal results extracted to VirusTotalResults/"

      - name: Set VirusTotal Analysis URL for SpotVeeC
        if: ${{ env.VT_ENABLED == 'true' }}
        run: echo "VTSPOTV=${{ steps.vt-spotv.outputs.analysis }}" >> $GITHUB_ENV

# The rest of your workflow (release creation, Catbox uploads, changelog, final messages) continues exactly as before
