name: Build and Release

on:
  workflow_dispatch:
    inputs:
      SPOTURL:
        description: 'Direct URL to Spotify .ipa'
        required: true
      CHANGEVERSION:
        description: 'SpotveeC Version Number'
        required: false
      USEACTIONSEEVEE:
        description: 'Get EeveeSpotify from latest build workflow'
        required: true
        default: false
        type: boolean
      EEVEEVERSION:
        description: 'EeveeSpotify Version'
        required: false
      EEVEEREPO:
        description: 'Override EeveeSpotify repo'
        required: false

jobs:
  build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up environment variables
      run: |
        echo "SPOTURL=${{ github.event.inputs.SPOTURL }}" >> $GITHUB_ENV
        echo "CHANGEVERSION=${{ github.event.inputs.CHANGEVERSION }}" >> $GITHUB_ENV
        echo "EEVEEVERSION=${{ github.event.inputs.EEVEEVERSION }}" >> $GITHUB_ENV
        echo "VT_ENABLED=${{ secrets.VIRUSTOTALKEY != '' }}" >> $GITHUB_ENV
        echo "CATBOXHASH_ENABLED=${{ secrets.CATBOXHASH != '' }}" >> $GITHUB_ENV
        EEVEEREPO="${{ github.event.inputs.EEVEEREPO || 'whoeevee/EeveeSpotifyReborn' }}"
        echo "EEVEEREPO=$EEVEEREPO" >> $GITHUB_ENV

    - name: Setup Python 3.13 and Cyan
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    - run: pipx install --force https://github.com/SpotCompiled/pyzule-rw/archive/main.zip

    - name: Fetch EeveeSpotify Tag
      run: |
        if [ -z "${{ env.EEVEEVERSION }}" ]; then
          EEVEETAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/releases/latest | jq -r .tag_name)
        else
          tags=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/tags | jq -r '.[].name')
          for tag in $tags; do
            [[ "$tag" == *"${{ env.EEVEEVERSION }}"* ]] && EEVEETAG=$tag && break
          done
          [ -z "$EEVEETAG" ] && exit 1
        fi
        echo "EEVEETAG=$EEVEETAG" >> $GITHUB_ENV

    - name: Download Spotify IPA
      run: |
        curl -LJO "${{ env.SPOTURL }}"
        mv $(ls -t | head -n1) "Build Components/"
        echo "spotifypath=Build Components/$(ls -t Build Components | head -n1)" >> $GITHUB_ENV

    - name: Download and verify Orion
      run: |
        curl -sSL https://repo.chariz.com/Packages -o Packages
        ORIONFILE=$(awk '...' Packages) # Include your awk extraction logic here
        curl -LJO "https://repo.chariz.com/$ORIONFILE"
        mv $(ls -t | head -n1) "Build Components/"
        echo "orion=Build Components/$ORIONFILE" >> $GITHUB_ENV
        rm Packages

    - name: Download EeveeSpotify .deb
      run: |
        if [ "${{ github.event.inputs.USEACTIONSEEVEE }}" == "true" ]; then
          # Download from workflow artifacts
          workflow_run_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ env.EEVEEREPO }}/actions/workflows/build-swift.yml/runs?status=success&per_page=1" | jq -r '.workflow_runs[0].id')
          eevee_asset=$(curl -sL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/actions/runs/$workflow_run_id/artifacts | jq -r '.artifacts[0].archive_download_url')
          curl -LJ -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$eevee_asset" -o "eeveespotfiy.zip"
          unzip -q "eeveespotfiy.zip" -d extracted_files
          mv $(find extracted_files -type f -name "*.deb" | head -n1) "Build Components/"
          echo "eevee-arm64=Build Components/$(ls -t Build Components | head -n1)" >> $GITHUB_ENV
          rm -rf extracted_files
        else
          # Download from releases
          eevee_asset=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/releases/tags/${{ env.EEVEETAG }} | jq -r '.assets[] | select(.name | test("com.eevee.spotify.*iphoneos-arm64.deb")) | .browser_download_url')
          curl -LJO "$eevee_asset"
          mv $(ls -t | head -n1) "Build Components/"
          echo "eevee-arm64=Build Components/$(ls -t Build Components | head -n1)" >> $GITHUB_ENV
        fi

    - name: Download SwiftProtobuf .deb
      run: |
        protobuf_asset=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ env.EEVEEREPO }}/releases/tags/${{ env.EEVEETAG }} | jq -r '.assets[] | select(.name | startswith("org.swift.protobuf.swiftprotobuf") and endswith("iphoneos-arm64.deb")).browser_download_url')
        curl -LJO "$protobuf_asset"
        mv $(ls -t | head -n1) "Build Components/"
        echo "swiftprotobuf=Build Components/$(ls -t Build Components | head -n1)" >> $GITHUB_ENV

    - name: Run Cyan Patch
      run: |
        Cyan -i "${{ env.spotifypath }}" -o "Build Components/SpotveeC.v${{ env.CHANGEVERSION }}.ipa" -v ${{ env.CHANGEVERSION }} -f "${{ env.orion }}" "${{ env.swiftprotobuf }}" "${{ env.eevee-arm64 }}" -u -w
        echo "patchedspotify=Build Components/SpotveeC.v${{ env.CHANGEVERSION }}.ipa" >> $GITHUB_ENV

    - name: Upload to VirusTotal
      if: ${{ env.VT_ENABLED == 'true' }}
      uses: crazy-max/ghaction-virustotal@v4
      with:
        files: "${{ env.patchedspotify }}"
        vt_api_key: ${{ secrets.VIRUSTOTALKEY }}

    - name: Upload to Catbox
      if: ${{ env.CATBOXHASH_ENABLED == 'true' }}
      run: |
        RELEASEURL=$(curl -F "reqtype=fileupload" -F "userhash=${{ secrets.CATBOXHASH }}" -F "fileToUpload=@${{ env.patchedspotify }}" https://catbox.moe/user/api.php)
        echo "RELEASEURL=$RELEASEURL" >> $GITHUB_ENV
